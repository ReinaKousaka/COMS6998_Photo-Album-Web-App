AWSTemplateFormatVersion: "2010-09-09"
Description: Template for CS6998 A2 Photo Album Web App
Resources:
  S3BucketFrontendB1:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      BucketName: cs6998-cloud-photos.com
      WebsiteConfiguration:
        IndexDocument: index.html
      VersioningConfiguration: 
        Status: Enabled

  S3BucketPolicyB1:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: cs6998-cloud-photos.com
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketFrontendB1}/*'
            Principal: '*'

  S3BucketPhotosB2:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      BucketName: cs6998-cloud-photos-b2
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - 'Access-Control-Allow-Origin'

  S3BucketPolicyB2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: cs6998-cloud-photos-b2
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketPhotosB2}/*'
            Principal: '*'

  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: cs6998-cloud-photos-oss
      ClusterConfig:
        InstanceType: t3.small.search
      EBSOptions: 
        EBSEnabled: true
        VolumeSize: 10

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "cs6998-PhotoSearch"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        basePath: "/stage1"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          /upload:
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          /upload/{object}:
            put:
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "object"
                in: "path"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "object"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"

  # index photos 
  LF1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cs6998-a2-LF1
      Handler: LF1-index-photos.lambda_handler
      Role: arn:aws:iam::605752467729:role/service-role/ALL-lambda
      Runtime: python3.9
      Timeout: 30
      Code:
        S3Bucket: cs6998-a2-lambdas
        S3Key: LF1.zip
  
  S3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LF1
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: '605752467729'
      SourceArn: "arn:aws:s3:::cs6998-cloud-photos-b2"

  LF2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cs6998-a2-LF2
      Handler: LF2-search-photos.lambda_handler
      Role: arn:aws:iam::605752467729:role/service-role/ALL-lambda
      Runtime: python3.9
      Timeout: 30
      Code:
        S3Bucket: cs6998-a2-lambdas
        S3Key: LF2.zip
  
  LexBotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LexRuntimeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "polly:SynthesizeSpeech"
                  - "comprehend:DetectSentiment"
                Resource: "*"

  Lex:
    DependsOn: LexBotRuntimeRole
    Type: AWS::Lex::Bot
    Properties:
      Name: "cs6998-a2-Lex1"
      RoleArn: !GetAtt LexBotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: "en_US"
          Description: "Search a photo bot Locale"
          NluConfidenceThreshold: 0.40
          Intents:
            - Name: "SearchIntent"
              Description: "Intent to search photos"
              SampleUtterances:
                - Utterance: "{Keyword1}"
                - Utterance: "{Keyword1} and {Keyword2}"
                - Utterance: "Show me {Keyword1}"
                - Utterance: "Show me {Keyword1} and {Keyword2}"
                - Utterance: "Show me pictures of {Keyword1}"
                - Utterance: "Show me pictures of {Keyword1} and {Keyword2}"
                - Utterance: "I want photos of {Keyword1}"
                - Utterance: "I want photos of {Keyword1} and {Keyword2}"
              SlotPriorities:
                - Priority: 1
                  SlotName: Keyword1
                - Priority: 2
                  SlotName: Keyword2 
              Slots:
                - Name: "Keyword1"
                  SlotTypeName: "AMAZON.AlphaNumeric"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "-"
                      MaxRetries: 3
                      AllowInterrupt: false
                - Name: "Keyword2"
                  SlotTypeName: "AMAZON.AlphaNumeric"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "-"
                      MaxRetries: 3
                      AllowInterrupt: false
            - Name: "FallbackIntent"
              Description: "Default intent when no other intent matches"
              ParentIntentSignature: "AMAZON.FallbackIntent"
  
  SearchPhotoBotVersion:
    DependsOn: Lex
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref Lex
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: SearchPhoto Version  

  FirstBotAlias:
    DependsOn: SearchPhotoBotVersion
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref Lex
      BotAliasName: "SearchPhotoAlias"
      BotVersion: !GetAtt SearchPhotoBotVersion.BotVersion
      BotAliasLocaleSettings:
      - LocaleId: "en_US"
        BotAliasLocaleSetting:
          Enabled: true
      SentimentAnalysisSettings:
        DetectSentiment: false
